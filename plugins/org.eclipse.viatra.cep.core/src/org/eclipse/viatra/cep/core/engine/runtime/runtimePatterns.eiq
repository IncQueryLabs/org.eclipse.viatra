/*******************************************************************************
 * Copyright (c) 2004-2014, Istvan David, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Istvan David - initial API and implementation
 *******************************************************************************/
package org.eclipse.viatra.cep.core.engine.runtime

import "cep.meta"
import "automaton.meta"
import "http://www.eclipse.org/emf/2002/Ecore"

////////////EVENT PROCESSING////////////

pattern latestEvent(event : Event) {
	InternalModel.latestEvent(_, event);
}

////////////TOKEN BASED OPERATIONS////////////
pattern finishedAutomaton(automaton : Automaton, eventToken : EventToken) {
	Automaton.finalStates(automaton, finalState);
	EventToken.currentState(eventToken, finalState);
}

pattern tokenInTrapState(automaton : Automaton, eventToken : EventToken) {
	Automaton.trapState(automaton, trapState);
	TrapState.eventTokens(trapState, eventToken);
}

pattern tokenInInitState(automaton : Automaton, eventToken : EventToken) {
	Automaton.initialState(automaton, initState);
	InitState.eventTokens(initState, eventToken);
}

pattern tokenInFinalState(automaton : Automaton, eventToken : EventToken) {
	Automaton.finalStates(automaton, finalState);
	FinalState.eventTokens(finalState, eventToken);
}

pattern resettableEventToken(automaton : Automaton, eventToken : EventToken){
	neg find tokenInInitState(automaton, eventToken);
	neg find tokenInFinalState(automaton, eventToken);
}

pattern enabledTransition(transition : TypedTransition, eventToken : EventToken, event : Event, automaton : Automaton) {
	find latestEvent(event);
	Event.type(event, eventType);
	TypedTransition.guards.eventType(transition, eventPatternReference);
	AtomicEventPattern.type(eventPatternReference, eventType);
	TypedTransition.preState.eventTokens(transition, eventToken);
	neg find negativeTransition(transition);
	neg find eventProcessedByEventToken(event, eventToken);
	
	Automaton.states(automaton, state);
	State.outTransitions(state, transition);
}

pattern enabledNegativeTransition(transition : NegativeTransition, eventToken : EventToken, event : Event, automaton : Automaton) {
	find latestEvent(event);
	Event.type(event, eventType);
	neg find transitionWithEventType(transition, eventType);
	NegativeTransition.preState.eventTokens(transition, eventToken);
	neg find eventProcessedByEventToken(event, eventToken);
	
	Automaton.states(automaton, state);
	State.outTransitions(state, transition);
}

pattern transitionWithEventType(transition : Transition, eventType : EString){
	NegativeTransition.guards.eventType(transition, eventPatternReference);
	AtomicEventPattern.type(eventPatternReference, eventType);
}

pattern negativeTransition(transition : NegativeTransition){
	NegativeTransition(transition);
}

pattern eventProcessedByEventToken(event : Event, eventToken : EventToken) {
	EventToken.lastProcessed(eventToken, event);
}

pattern partiallyMatchedEventPattern(automaton : Automaton, eventToken : EventToken, state : State) {
	Automaton.eventTokens(automaton, eventToken);
	State.eventTokens(state, eventToken);
	neg find initState(automaton, state);
}

pattern initState(automaton : Automaton, initState : InitState) {
	Automaton.initialState(automaton, initState);
}

////////////TIMING PATTERNS////////////

pattern tokenEntersTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone) {
	EventToken.currentState(eventToken, state);
	State.inStateOf(state, timedZone);
}

pattern tokenLeavesTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone, trapState : TrapState) {
	EventToken.currentState(eventToken, state);
	EventToken.timedZones(eventToken, timedZone);
	State.outStateOf(state, timedZone);
	
	Automaton.eventTokens(automaton, eventToken);
	Automaton.states(automaton, trapState);
}

pattern tokenInTimedZone(eventToken : EventToken, state : State, timedZone : TimedZone) {
	EventToken.currentState(eventToken, state);
	State.inStateOf(state, timedZone);
}