package org.eclipse.viatra.cep.core.compiler.testdata.patterns

atomicEvent a
atomicEvent b
atomicEvent c
atomicEvent a_1(p : String)
atomicEvent b_1(p : String)
atomicEvent c_1(p : String)

complexEvent follows(){
	as a->b
}

complexEvent nestedFollows(){
	as follows -> c
}

complexEvent or(){
	as a OR b
}

complexEvent nestedOr(){
	as or OR c
}

complexEvent nestedOrWithFollows1(){
	as follows OR c
}

complexEvent nestedOrWithFollows2(){
	as or -> c
}

complexEvent and(){
	as a AND b
}

complexEvent and2(){
	as follows AND c
}

complexEvent duplicate(){
	as follows -> b
}

complexEvent duplicate2(){
	as or OR b
}

complexEvent multiplicityOnAtomic(){
	as a->b{2}
}

complexEvent multiplicityOnComplex1(){
	as (a->b){2}
}

complexEvent multiplicityOnComplex2(){
	as follows{2}
}

complexEvent multiplicityOnComplex3(){
	as (a OR b){2}
}

complexEvent multiplicityOnComplex4(){
	as or{2}
}

complexEvent inf1(){
	as a{*}->b
}

complexEvent inf2(){
	as (a->b){*}->c
}

complexEvent atLeast1(){
	as a{+}->b
}

complexEvent atLeast2(){
	as (a->b){+}->c
}

complexEvent timewinFollows(){
	as (a->b)[1000]
}

complexEvent timewinFollows2(){
	as (a -> b -> c)[1000]
}

complexEvent timewinFollows3(){
	as ((a -> b) -> c)[1000]
}

complexEvent timewinOr(){
	as (a OR b)[1000]
}

complexEvent timewinAnd(){
	as (a AND b)[1000]
}

complexEvent timewinOr2(){
	as ((a->b) OR (b->a))[1000]
}

complexEvent notAtomic(){
	as NOT a
}

complexEvent notFollows(){
	as NOT paramsFollows
}

complexEvent notFollows2(){
	as NOT (paramsFollows -> c)
}

complexEvent notFollows3(){
	as a -> NOT b -> c
}

complexEvent notOr(){
	as NOT or
}

complexEvent notAnd(){
	as NOT (a AND b)
}

complexEvent notFollowsParams(param : String){
	as NOT (a_1(param) -> b_1(param))
}

complexEvent notOrParams(param : String){
	as NOT (a_1(param) OR b_1(param))
}

complexEvent notAndParams(param : String){
	as NOT (a_1(param) AND b_1(param))
}

complexEvent notFollowsTimewin(){
	as NOT ((a->b)[1000])
}

complexEvent notOrTimewin(){
	as NOT ((a OR b)[1000])
}

complexEvent notAndTimewin(){
	as (NOT (a AND b))[1000]
}

complexEvent paramsFollows(param : String){
	as a_1(param) -> b_1(param)
}

complexEvent paramsOr(param : String){
	as a_1(param) OR b_1(param)
}

complexEvent paramsAnd(param : String){
	as a_1(param) AND b_1(param)
}



/* CASE STUDY */

atomicEvent Left
atomicEvent Right
atomicEvent Rise
atomicEvent Fall
atomicEvent Near
atomicEvent Far

rule r on follows{
	System.out.println("rule r")
}

complexEvent teq1(){
	as Left -> (Left OR Rise OR Fall OR Near OR Far){*} -> Right
}