/*******************************************************************************
 * Copyright (c) 2004-2014, Istvan David, Istvan Rath and Daniel Varro
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Istvan David - initial API and implementation
 *******************************************************************************/

grammar org.eclipse.viatra.cep.vepl.Vepl with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/viatra/query/patternlanguage/PatternLanguage" as iqpl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate vepl "http://www.eclipse.org/viatra/cep/vepl/Vepl"

EventModel:
	'package' name=QualifiedName
	imports+=Import*
	('context' context = Context)?
	modelElements+=ModelElement*	
;

Import:
	GenericImport | QueryImport
;

GenericImport:
	'import' importedNamespace=QualifiedNameWithWildcard;
	
QueryImport:
	'import-queries' importedNamespace=QualifiedNameWithWildcard;
	
enum ContextEnum:
	not_set | chronicle | immediate | strict
;

enum Context returns ContextEnum:
	chronicle | immediate | strict
;

ModelElement:
	Trait | EventPattern | Rule
;

/*******************************************MAIN MODEL ELEMENTS*******************************************/

Trait:
	'trait' name=ID'{'
		parameters=TraitTypedParameterList
		//('check' checkExpression = XBlockExpression)?
	'}'
;

EventPattern:
	AbstractAtomicEventPattern | ComplexEventPattern
;

AbstractAtomicEventPattern:
	AtomicEventPattern | QueryResultChangeEventPattern
;
	
AtomicEventPattern:
	'atomicEvent' name=ID ('('parameters=TypedParameterList?')')? ('with' traits=TraitList)? ('{'
		('check' checkExpression = XBlockExpression)?
	'}')?
;
	
QueryResultChangeEventPattern:
	'queryEvent' name=ID '('parameters=TypedParameterList?')' 'as'
		queryReference=ParametrizedQueryReference (resultChangeType=QueryResultChangeType)?
;

ComplexEventPattern:
	'complexEvent' name=ID '('parameters=TypedParameterList?')' '{'
		'as' complexEventExpression=ComplexEventExpression
		('context' context=Context)?
	'}'
;

Rule:
	'rule' name=ID 'on' eventPatterns+=ParameterizedPatternCall (','eventPatterns+=ParameterizedPatternCall)*
		action = XBlockExpression
;


/*******************************************BASIC EVENT TYPE ELEMENTS*******************************************/
	
	
	
/*******************************************IQ PATTERN ELEMENTS*******************************************/
enum QueryResultChangeType:
	found | lost 
;
/*******************************************IQ PATTERN ELEMENTS*******************************************/



/*******************************************FUNCTION ARGUMENT PARAMETERS*******************************************/
TraitList:
	{TraitList}
	traits+=[Trait] (',' traits+=[Trait])*
;

TypedParameterList:
	{TypedParameterList}
	parameters+=TypedParameter (',' parameters+=TypedParameter)*
;

TypedParameter:
	{TypedParameter}
	name=ID ':' type = JvmTypeReference
;

TypedParameterWithDefaultValue:
	typedParameter = TypedParameter ('=' value=XAssignment)?
;

TraitTypedParameterList:
	parameters+=TypedParameterWithDefaultValue (',' parameters+=TypedParameterWithDefaultValue)*
;

/*******************************************FUNCTION ARGUMENT PARAMETERS*******************************************/

/*******************************************VIATRA QUERY INTEGRATION*******************************************/
ParametrizedQueryReference:
	query=[iqpl::Pattern]('('parameterList=PatternCallParameterList?')')?
;
/*******************************************VIATRA QUERY INTEGRATION*******************************************/

/*******************************************COMPLEX EVENT EXPRESSIONS*******************************************/

ComplexEventExpression:
	Primary ({ComplexEventExpression.left=current} (right+=ChainedExpression)*)
;

ChainedExpression:
	operator=BinaryOperator expression=Primary
;

Primary returns ComplexEventExpression:
	NormalPrimary | NegatedPrimary
;

NormalPrimary returns ComplexEventExpression:
	Atom (multiplicity=AbstractMultiplicity)? (timewindow=Timewindow)? |
	'('ComplexEventExpression')' (multiplicity=AbstractMultiplicity)? (timewindow=Timewindow)?
;

NegatedPrimary returns ComplexEventExpression:
	negOperator = NegOperator left = NormalPrimary
;

Atom:
	patternCall=ParameterizedPatternCall
;

AbstractMultiplicity:
	Multiplicity | Infinite | AtLeastOne
;

Multiplicity returns AbstractMultiplicity:
	{Multiplicity}
	'{'value=INT'}'
;

Infinite returns AbstractMultiplicity:
	{Infinite}
	'{''*''}'
;

AtLeastOne returns AbstractMultiplicity:
	{AtLeastOne}
	'{''+''}'
;

Timewindow:
	'['length=INT']'
;

ParameterizedPatternCall:
	eventPattern=[EventPattern]('('parameterList=PatternCallParameterList?')')?
;

PatternCallParameterList:
	{PatternCallParameterList}
	parameters+=PatternCallParameter (',' parameters+=PatternCallParameter)*
;

PatternCallParameter:
	{PatternCallParameter}
	name=ID
;

/*******************************************COMPLEX EVENT EXPRESSIONS*******************************************/



/*******************************************OPERATORS*******************************************/
ComplexEventOperator:
	BinaryOperator | UnaryOperator
;

BinaryOperator:
	FollowsOperator | OrOperator | AndOperator //| UntilOperator
;

UnaryOperator:
	NegOperator
;

FollowsOperator:
	{FollowsOperator}
	'->'
;

OrOperator:
	{OrOperator}
	'OR'
;

AndOperator:
	{AndOperator}
	'AND'
;

UntilOperator:
	{UntilOperator}
	'U'
;

NegOperator:
	{NegOperator}
	'NOT'
;

/*******************************************OPERATORS*******************************************/