package com.incquerylabs.uml.text.generator.queries

import "http://www.eclipse.org/uml2/5.0.0/UML" as uml
import "http://www.incquerylabs.com/uml/targetModel" as target
import "http://www.incquerylabs.com/uml/tracemodel" as trace
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

@Item(item = umlClass, label = "$umlClass.name$")
pattern UmlClass(umlClass: Class) {
	Class(umlClass);
	// only accept "real" classes (in UML, it has lots of counterintuitive subclasses)
	neg find xtAssociationClass(umlClass);
	neg find behavior(umlClass);
	neg find xtComponent(umlClass);
	neg find node(umlClass);
	neg find stereotype(umlClass);
	neg find templateParameterClass(umlClass);
	neg find templateBindingClass(umlClass);
}

pattern getTraceforUMLElement(umlClass : Element, trace : Trace){
	Trace.umlElement(trace, umlClass);
}

@Edge(source = umlelement, target = dtelement)
pattern getTrace(umlelement : Element, dtelement : EObject){
	Trace.umlElement(trace, umlelement);
	Trace.dtUMLElement(trace, dtelement);
}

pattern getTraceModel(umlModel : Model, dtModel : TModel){
	Trace.umlElement(trace, umlModel);
	Trace.dtUMLElement(trace, dtModel);
}

pattern getTraceProperty(umlProperty : Property, dtProperty : TProperty){
	Trace.umlElement(trace, umlProperty);
	Trace.dtUMLElement(trace, dtProperty);
}

pattern getTraceOperation(umlOperation : Operation, dtOperation : TOperation){
	Trace.umlElement(trace, umlOperation);
	Trace.dtUMLElement(trace, dtOperation);
}

@Edge(source = cl, target = prop)
pattern Property(prop : Property, cl : Class) {
	Class.ownedAttribute(cl,prop);
}

@Item(item = prop, label = "$prop.name$")
pattern getProperty(prop : Property) {
	Property(prop);
}

@Edge(source = cl, target = op)
pattern Operation(op : Operation, cl : Class) {
	find entity(cl);
	Class.ownedOperation(cl,op);
}

@Item(item = op, label = "$op.name$")
pattern getOperation(op : Operation) {
	Operation(op);
}

@Item(item = class, label = "$class.name$")
@Format(color = "#00ff00")
pattern getTClass(class : TClass){
	TClass(class);
}

@Item(item = prop, label = "$prop.name$")
@Format(color = "#00ff00")
pattern getTProperty(prop : TProperty){
	TProperty(prop);
}

@Edge(source = cl, target = prop)
pattern getTPropertyEdge(cl: TClass, prop : TProperty){
	TClass.properties(cl,prop);
}

@Item(item = op, label = "$op.name$")
@Format(color = "#00ff00")
pattern getTOperation(op : TOperation){
	TOperation(op);
}

@Edge(source = cl, target = op)
pattern getTOperationEdge(cl: TClass, op : TOperation){
	TClass.operations(cl,op);
}

pattern returnParameterInOperation(operation: Operation, returnParameter: Parameter) {
	find regularOperation(_, operation);
	Operation.ownedParameter(operation, returnParameter);
	Parameter.direction(returnParameter, ParameterDirectionKind::^return);
}

pattern regularOperation(umlClass: Class, operation: Operation) {
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
	neg find constructorByName(umlClass, operation);
	neg find destructorByName(umlClass, operation);
}

pattern processedClass(umlClass : Class, trace : Trace) {
	Trace.umlElement(trace, umlClass);
}

//Auxiliary patterns
pattern constructorByName(umlClass : Class, operation : Operation){
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
	Class.name(umlClass, name);
	Operation.name(operation, name);
}

pattern destructorByName(umlClass : Class, operation : Operation){
	find entity(umlClass);
	Class.ownedOperation(umlClass, operation);
	Operation.name(operation, opName);
	check ( opName == "destroy" );
}

private pattern entity(umlClass: Class) {
	find UmlClass(umlClass);
} or {
	find xtComponent(umlClass);
}

private pattern hasTrace(umlElement : Element, trace : Trace) {
	Trace.umlElement(trace, umlElement);
}


private pattern behavior(it) {
	Behavior(it);
}

private pattern node(it) {
	Node(it);
}

private pattern stereotype(it) {
	Stereotype(it);
}

private pattern templateParameterClass(umlClass: Class){
  TemplateSignature.ownedParameter(_, param);
  ClassifierTemplateParameter.parameteredElement(param, umlClass);
}

private pattern templateBindingClass(umlClass: Class){
  TemplateBinding.parameterSubstitution(_, param);
  TemplateParameterSubstitution.actual(param, umlClass);
}

pattern xtComponent(component: Component) {
	Component(component);
}

pattern xtAssociationClass(associationClass) {
	AssociationClass(associationClass);
}

